import { AggregatedCampaign } from "../components/AnalyticsDashboard";
import { Topic } from "../components/TopicsTable";
import { APIClient } from "./apiClient";

const openaiAPIKey = import.meta.env.VITE_OPENAI_API_KEY;
const openaiClient = new APIClient("https://api.openai.com/v1", openaiAPIKey);
const countriesClient = new APIClient("https://restcountries.com/v3.1");
const geoClient = new APIClient("https://ipwhois.app");
const backendURL = import.meta.env.VITE_BACKEND_URL;
const backendClient = new APIClient(backendURL);

/**
 * Generates campaign topics based on the given prompt.
 *
 * Uses the OpenAI `gpt-3.5-turbo` model to generate a list of topics based on the given
 * prompt. The model is configured with the given temperature, which controls the
 * randomness of the generated topics.
 *
 * @param prompt The prompt for the model to generate topics. This should be a string
 * that describes the desired topics, such as "entertainment, movies, comedy".
 * @param temperature The temperature for the model. This controls how random the
 * generated topics are. A higher temperature will result in more random topics. The
 * default temperature is 0.7.
 *
 * @returns A promise that resolves to an array of strings, where each string is a
 * topic generated by the model.
 */
export const generateCampaignTopics = async (
  prompt: string,
  temperature: number = 0.7
) => {
  try {
    const response = await openaiClient.post("/chat/completions", {
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      temperature,
    });
    return response;
  } catch (error) {
    throw error;
  }
};

/**
 * Fetches a list of all countries from the countries API.
 *
 * @returns A promise that resolves to an array of strings, where each string is the
 * name of a country.
 */
export const fetchCountries = async (): Promise<string[]> => {
  const response = await countriesClient.get("/all");
  const countries = response.data
    .map((country: any) => country.name.common)
    .sort();
  return countries;
};

/**
 * Fetches the user's country based on their IP address.
 *
 * This function uses the IPWhois API to determine the country associated
 * with the user's current IP address. If the API request fails or does
 * not return a valid country, the function defaults to returning "United States".
 *
 * @returns A promise that resolves to a string representing the user's country.
 */

export const fetchUserCountry = async (): Promise<string> => {
  try {
    const response = await geoClient.get("/json/");
    return response.data.country || "United States";
  } catch (err) {
    console.error("Error fetching user country", err);
    return "United States";
  }
};

/**
 * Stores the given campaign topics in the backend.
 *
 * @param topics - The topics to store. Each topic should have the following
 * properties:
 * - vertical: string
 * - subVertical: string
 * - topicTitle: string
 * - geo: string
 * - platform: string
 * - feedback?: "like" | "dislike" | null
 * @returns A promise that resolves to the response from the backend.
 */
export const storeCampaignTopics = async (topics: Topic[]) => {
  try {
    const response = await backendClient.post("/api/campaigns", { topics });
    return response;
  } catch (error) {
    throw error;
  }
};

/**
 * Updates the feedback for a single topic, and updates the feedback stats.
 *
 * @param {string} topicTitle - The title of the topic to update.
 * @param {string} geo - The geo associated with the topic (e.g. "United States").
 * @param {string} platform - The platform associated with the topic (e.g. "TikTok").
 * @param {"like"|"dislike"} feedback - The feedback to update.
 *
 * @returns A promise that resolves to the response from the backend.
 */
export const updateCampaignFeedback = async (
  topicTitle: string,
  geo: string,
  platform: string,
  feedback: "like" | "dislike"
) => {
  try {
    const response = await backendClient.post("/api/campaigns/feedback", {
      topicTitle,
      geo,
      platform,
      feedback,
    });
    return response;
  } catch (error) {
    throw error;
  }
};

/**
 * Fetches aggregated campaign topics from the backend.
 *
 * @returns A promise that resolves to an array of AggregatedCampaign objects.
 * Each AggregatedCampaign object has the following properties:
 * - vertical: string
 * - subVertical: string
 * - topicTitle: string
 * - geo: string
 * - platform: string
 * - count: number
 * - feedbackStats: { likes: number, dislikes: number }
 */
export const fetchAggregatedCampaigns = async (): Promise<
  AggregatedCampaign[]
> => {
  try {
    const response = await backendClient.get<AggregatedCampaign[]>(
      "/api/campaigns/aggregated"
    );
    return response.data;
  } catch (error) {
    throw error;
  }
};
